

//type i32 = int32_t

type MyStruct = (
    a: int
    b: int
)

// TODO
//fn CreateOnStack = (a: int) -> MyStruct {
//    (a, a)
//}

fn CreateOnStack = (a: int) -> MyStruct {
    let x : MyStruct = (a, a)
    x
}

fn Print = (s : MyStruct) -> () {
    printf("a: %d, b: %d\n", s.a, s.b)
}

fn PrintInt = (a: int) -> () {
    printf("int: %d\n", a)
}

fn AddTwoNumbers = (a: int, b: int) -> int {
    a + b
}

// fn ForEachImpl<In, Out> = (a : Array(In), func: (x: In) -> Out, cur_idx: u64) -> () {
//     if (cur_idx < array::GetSize(a)) {
//         func(a[cur_idx]) 
//         func(array::Get(a, cur_idx)) 
//         ForEachImpl(a, func, cur_idx + 1)
//     }
// }

// TOOOO compilcated
// let ForEachImpl = (In: type, Out: type) ->  
//                      ((a : Array(In), func: (x: In) -> Out, cur_idx: u64) -> ()) 
// { 
//     (a : Array(In), func: (x: In) -> Out, cur_idx: u64) -> () 
//     {
//         if (cur_idx < array::GetSize(a)) {
//             func(a[cur_idx]) 
//             func(array::Get(a, cur_idx)) 
//             ForEachImpl(a, func, cur_idx + 1)
//         }
//     }
// }

//fn ForEach = (a : Array<i32>, func: (x: i32) -> String) -> () 
//{
//    ForEachImpl(a, func, 0)
//}

// First going to get returning from functions working...
// Then going to make structs work?

//type Array_Int = (
//    data : cexpr 'char *'
//)

fn main = () -> int {
    let x = "hello world"

    let y : MyStruct = (2, 3)

    Print(y)
    PrintInt(y.a)
    let z = AddTwoNumbers(5, 6) 
    PrintInt(z)
    Print(CreateOnStack(12))

//    let foo : Array<i32> = ()
//
//    ForEach(foo, (a : i32) -> () {
//        printf("%d", a)
//    })

    printf("%s\n", x)
    0
}

    //let z = CreateOnStack(14)

    // How does this mesh with casting? (Which is important for numerical stuff)
    // This is my fave - matches the declaration, also matches the way you pass to functions....
    //let x_on_the_stack: MyStruct = (2, 3) // or { (2, 3) } to make it block expr? 
    //let x_on_the_stack_from_func = CreateOnStack(13) // or { (2, 3) } to make it block expr? 
    // Print(x_on_the_stack)
    //Print((2, 3))
    //Print(CreateOnStack(3))

     // I actually don't like this because it isn't the same as the declaration or function params,
     // which are name : type
    // let x_on_the_stack: MyStruct = (a: 2, b: 3)

    // let x_on_the_heap : MyStruct = mem::HeapAlloc<MyStruct>((2, 3)) // How to take struct by rvalue?
//    Print(x_on_the_stack) // Use them the same way, always pointer under the hood
    //Print(x_on_the_heap)



