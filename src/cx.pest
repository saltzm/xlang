WHITESPACE = _{ (" ") }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* }

Plus = { "+" }
Minus = { "-" }
Multiply = { "*" }
Divide = { "/" }

InfixOperator = _{
    ( Plus
    | Minus
    | Multiply
    | Divide
    )
}

// TODO separate var/fn?

VariableIdentifier = 
    @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

TypeIdentifier = @{ ASCII_ALPHANUMERIC ~ (ASCII_ALPHANUMERIC | "_")* }
FunctionIdentifier = @{ ASCII_ALPHANUMERIC ~ (ASCII_ALPHANUMERIC | "_")* }

Integer = @{ "-"? ~ ASCII_DIGIT+ }
Decimal = @{ "-"? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* }
StringLiteral = @{ "\"" ~ ( "''" | (!"\"" ~ ANY) )* ~ "\"" }
Constant = { (Decimal | Integer | StringLiteral) }

PrimaryExpression =
    {( Constant 
    |  VariableIdentifier 
    |  "(" ~ PrimaryExpression ~ ")"
    )} 

PostfixExpression = 
    { FunctionIdentifier ~ "(" ~ ArgumentExpressionList ~ ")" }

StructFieldAccessExpression = 
    { VariableIdentifier ~ "." ~ (StructFieldAccessExpression | VariableIdentifier) }

InfixExpression = 
    { PrimaryExpression ~ InfixOperator ~ Expression }

// TODO: Clean this up somehow... 
BlockExpression =
     { "{" ~ 
        // This is like this because otherwise the greedy algorithm
        // will never move on to expect the last expression.
         (!(NEWLINE* ~ Expression ~ NEWLINE* ~ "}") ~ 
            NEWLINE* ~ (VariableDeclaration | TypedVariableDeclaration | Expression))* ~ NEWLINE* ~ 
           ( VariableDeclaration | TypedVariableDeclaration| Expression|"(" ~ ArgumentExpressionList ~ ")") ~ NEWLINE*
       ~ "}"
     }

// An Expression is anything that returns a value
Expression = 
    _{( InfixExpression 
    |   PostfixExpression
    |   StructFieldAccessExpression
    |   PrimaryExpression
    |   BlockExpression
    )}

ArgumentExpressionList = 
    { Expression? ~ ("," ~ Expression)* }

VariableDeclaration = 
    { "let " ~ VariableIdentifier ~ "=" ~ Expression }

TypedVariableDeclaration = 
    { "let " ~ VariableIdentifier ~ ":" ~ TypeIdentifier ~ "=" ~ 
        (Expression|"(" ~ ArgumentExpressionList ~ ")") }

TypedVariable = 
    { VariableIdentifier ~ ":" ~ TypeIdentifier }

TypedVariableList = 
    { "(" ~ NEWLINE* ~ TypedVariable ? ~ ((","|NEWLINE+) ~ TypedVariable)* ~ NEWLINE* ~ ")" }

TypeDeclaration = 
    {"type " ~ TypeIdentifier ~ "=" ~ (TypedVariableList|TypeIdentifier) }

FunctionDeclaration = 
    { "fn" ~ FunctionIdentifier ~ "=" ~ TypedVariableList ~ "->" ~ 
                                        (TypedVariableList|TypeIdentifier) ~ BlockExpression
    }

Statement = 
    _{( FunctionDeclaration
     |  TypedVariableDeclaration
     |  VariableDeclaration 
     |  TypeDeclaration 
     |  Expression) }

Program = _{ SOI ~ "\n"* ~ (Statement ~ "\n"+) * ~ Statement? ~ EOI }
