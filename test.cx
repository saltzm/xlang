1.0 + 2
let bar = 3
Foo(bar, 2)
Foo()
{ Foo(bar, 2) }
{ 1.0 + 2 }
let foo = "hi"
let baz = 2334.000
{ Foo(bar, foo, 2, baz) }
{ 
    Foo(bar, 2) 
}
let x = 2
let x = 2.0
let x = "hi"
let y = 3
let x = y
let x = 2 + 4
let x = 2 + y
let x = Func(3)

fn Fn = (a: A) -> B {
    1 + 2
}

{
    let x = 4
    let y = Fn(x)
    x + y
    {
        let nested = 4
        nested + nested
    }
}

type Foo = (a : Something, b: Bla)
type Foo2 = (a : Something, b: Bla)
type Foo3 = (
    a : Something
    b: Bla
)

type Foo4 = (
    a : Something
)

// This is a comment
type Foo4 = ()

type Bla = Foo

fn SomeFunc = () -> Foo {
    let bla = 4
    bla
}

fn Func = (a: Foo, b: Bla) -> (cat: Dog, why: That) {
    let x = a
    let y = b
    let z = SomeFunc()
    {
        x + y
        let block_res = {
            let a = 4
            let b = a
            let c = b
            2.0 // TODO this needs to be here because currently "block statement" isn't a thing /
                // because BlockExpression has to end in an expression. But maybe that enforcement
                // should happen in the compiler to allow "void" block expressions?
            b
        }
        5
    }
    x + y
    Func2()
}

fn Main = (args: Array) -> U64 {
    let x = args
    let y = x
    x + y
}
